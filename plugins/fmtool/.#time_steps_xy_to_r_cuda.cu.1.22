#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "time_steps_xy_to_r_cuda.h"

#if defined(CUDA)

// required GPU array size alignment in bytes, 16 elements is ideal
#define GPU_ALIGNMENT 16
#define GPU_ALIGNMASK (GPU_ALIGNMENT - 1)

#if 1
#define CUERR { cudaError_t err; \
  cudaThreadSynchronize(); \
  if ((err = cudaGetLastError()) != cudaSuccess) { \
  printf("CUDA error: %s, line %d\n", cudaGetErrorString(err), __LINE__); \
  printf("aborting...\n"); \
  return -1; }}
#else
#define CUERR
#endif

typedef struct {
  dim3 sz;
  dim3 gpusz;
  dim3 Gsz;
  dim3 Bsz;
  float *pold;
  float *pnew;
  float *h;
  float *h_det;
  float *hI0kh;
} cudadevdata;


// -----------------------------------------------------------------
// Diffusion and bleaching.
//////////////////////////////////////////////////

// testing kernel
__global__ static void null_grid_cudakernel(const float dt,
                      const int iNrp2, const float rmin,
                      const float *hI0kh, const float dr, const float dz,
                      const float *p, float *pnew, const float D,
                      const float odr_o2, const float odr2, const float odz2,
                      const float t2odrz) {
  unsigned int k = __umul24(blockIdx.x, blockDim.x) + threadIdx.x;
  unsigned int i = __umul24(blockIdx.y, blockDim.y) + threadIdx.y;
  int n    = k*(iNrp2-2) + i;
  pnew[n] = 0;
}

// real kernel
__global__ static void calc_grid_cudakernel(const float dt,
                      const int iNrp2, const float rmin,
                      const float *hI0kh, const float dr, const float dz,
                      const float *p, float *pnew, const float D,
                      const float odr_o2, const float odr2, const float odz2,
                      const float t2odrz) {
  unsigned int k = __umul24(blockIdx.x, blockDim.x) + threadIdx.x;
  unsigned int i = __umul24(blockIdx.y, blockDim.y) + threadIdx.y;

  int n    = (k  )*(iNrp2  )+i+1;
  int nold = (k-1)*(iNrp2-2)+i+1;

  // read in values from global memory only once
  // XXX grid data should be read into shared memory,
  // eliminating redundant loads from sibling threads 
  float Pnm1 = p[n - 1];
  float Pn   = p[n    ];
  float Pnp1 = p[n + 1];
  float tmpr = Pnp1 + Pnm1;

  float Pnmr = p[n - iNrp2];
  float Pnpr = p[n + iNrp2];
  float tmpz  = Pnpr + Pnmr;

  float r = rmin + (i)*dr;
  float tmpr1;
  if (i == 0)
    tmpr1 = 0.0f;
  else 
    tmpr1 = (Pnp1 - Pnm1) / r;

  // Get the function p for the new step.
  float tmp = odr2 * tmpr + odz2 * tmpz - t2odrz * Pn + odr_o2 * tmpr1;

  float result = Pn + dt * (D * tmp - hI0kh[nold] * Pn);
  pnew[n] = (result < 0) ? 0 : result;
}

// -----------------------------------------------------------------
int copy_to_cuda_padded(float *dest, dim3 padsz, const float *src, dim3 sz) {
  int y;
  for (y=0; y<sz.y; y++) {
    cudaMemcpy(dest + (y * padsz.x), 
               src + (y * sz.x), 
               sz.x * sizeof(float), 
               cudaMemcpyHostToDevice);
    CUERR // check and clear any existing errors
  }
  return 0;
}

// -----------------------------------------------------------------
int copy_from_cuda_padded(float *dest, dim3 sz, const float *src, dim3 padsz) {
  int y;
  for (y=0; y<sz.y; y++) {
    cudaMemcpy(dest + (y * sz.x), 
               src + (y * padsz.x), 
               sz.x * sizeof(float), 
               cudaMemcpyDeviceToHost);
    CUERR // check and clear any existing errors
  }
  return 0;
}

int init_cuda_devdata(cudadevdata *dev, int Nr, int Nz) {
  dev->pold  = NULL;
  dev->pnew  = NULL;
  dev->h     = NULL;
  dev->h_det = NULL;
  dev->hI0kh = NULL;

  // Original array size
  dev->sz.x = Nr;
  dev->sz.y = Nz;
  dev->sz.z = 1;

  // Padded array size
  dev->gpusz.x = (Nr     + GPU_ALIGNMASK) & ~(GPU_ALIGNMASK);
  dev->gpusz.y = (Nz     + GPU_ALIGNMASK) & ~(GPU_ALIGNMASK);
  dev->gpusz.z = 1;

  dev->Bsz.x = 16;
  dev->Bsz.y = 16;
  dev->Bsz.z = 1;
 
  dev->Gsz.x = dev->gpusz.x / dev->Bsz.x;
  dev->Gsz.y = dev->gpusz.y / dev->Bsz.y;
  dev->Gsz.z = dev->gpusz.z / dev->Bsz.z;

  printf("Padded GPU array size: %dx%dx%d\n", 
         dev->gpusz.x, dev->gpusz.y, dev->gpusz.z);
  printf("CUDA Gsz: %dx%dx%d  Bsz: %dx%dx%d\n", 
         dev->Gsz.x, dev->Gsz.y, dev->Gsz.z,
         dev->Bsz.x, dev->Bsz.y, dev->Bsz.z);

  int gpumemsz = sizeof(float) * dev->gpusz.x * dev->gpusz.y * dev->gpusz.z;

  printf("Grid GPU memory allocation size: %.1f MB each, %.1f MB total\n",
         (double) gpumemsz / (1024 * 1024), 
         ((double) gpumemsz / (1024 * 1024)) * 5);
                   

  // allocate and initialize the GPU input/output arrays
  cudaMalloc((void**)&dev->pold,  gpumemsz);
  CUERR // check and clear any existing errors
  cudaMalloc((void**)&dev->h,     gpumemsz);
  CUERR // check and clear any existing errors
  cudaMalloc((void**)&dev->h_det, gpumemsz);
  CUERR // check and clear any existing errors
  cudaMalloc((void**)&dev->hI0kh, gpumemsz);
  CUERR // check and clear any existing errors

  cudaMalloc((void**)&dev->pnew, gpumemsz);
  CUERR // check and clear any existing errors

  return 0;
}

int free_cuda_devdata(cudadevdata *dev) {
  cudaFree(dev->pold);
  cudaFree(dev->h);
  cudaFree(dev->h_det);
  cudaFree(dev->hI0kh);
  cudaFree(dev->pnew);
  CUERR // check and clear any existing errors

  return 0;
}


// -----------------------------------------------------------------
int calc_grid_cuda(cudadevdata *dev,
                   const float dt,
                   const int Nr, const int Nz, const float rmin,
                   const float *h, const float *h_det,
                   const float *hI0kh, const float dr, const float dz,
                   const float *p, float *pnew, const float D) {

//printf("calc_grid_cuda()...\n");

  float odr2 = 1.0 / (dr * dr);
  float odz2 = 1.0 / (dz * dz);
  float odr_o2 = 0.5 / dr;
  float t2odrz = 2.0 * (odr2 + odz2);
  const int iNrp2 = Nr+2;   // saves several calculations

#if 0
  printf("null kernel...\n");
  null_grid_cudakernel<<<dev->Gsz, dev->Bsz, 0>>>(dt, iNrp2, rmin, 
                                        dev->hI0kh, 
                                        dr, dz, dev->pold, dev->pnew, 
                                        D, odr_o2, odr2, odz2, t2odrz);
#else
  calc_grid_cudakernel<<<dev->Gsz, dev->Bsz, 0>>>(dt, iNrp2, rmin, 
                                        dev->hI0kh, 
                                        dr, dz, dev->pold, dev->pnew, 
                                        D, odr_o2, odr2, odz2, t2odrz);
#endif
  CUERR // check and clear any existing errors

  return 0;
}

#endif

// -----------------------------------------------------------------

// Diffusion and bleaching.
//////////////////////////////////////////////////

void calc_grid_cudathreadsim(int k, int i, 
                      const float dt,
                      const int iNrp2, const int Nz, const float rmin,
                      const float *h, const float *h_det,
                      const float *hI0kh, const float dr, const float dz,
                      const float *p, float *pnew, const float D,
                      const float odr_o2, const float odr2, const float odz2,
                      const float t2odrz) {
  int n    = k*(iNrp2) + i + 1;
  int nold = (k-1)*(iNrp2-2)+i+1;

  // read in values from global memory only once
  float Pn   = p[n];
  float Pnp1 = p[n + 1];
  float Pnm1 = p[n - 1];
  float Pnpr = p[n + iNrp2];
  float Pnmr = p[n - iNrp2];

  float tmpr = Pnp1 + Pnm1;
  float tmpz  = Pnpr + Pnmr;

  float r = rmin + (i)*dr;
  float tmpr1 = (Pnp1 - Pnm1) / r;
  //if (k == 1)
  if (i == 0)
    tmpr1 = 0.0f;

  // Get the function p for the new step.
  float tmp = odr2 * tmpr + odz2 * tmpz - t2odrz * Pn + odr_o2 * tmpr1;
  float result = Pn + dt * (D * tmp - hI0kh[nold] * Pn);
  pnew[n] = (result < 0) ? 0 : result;

 
 /*
  int n, nold = 0;
  float r, tmpr, tmpr1, tmp, tmpz;

  n = k*(iNrp2) + i + 1;
  nold = (k-1)*(iNrp2-2)+i+1;
  r = rmin + (i)*dr;
  tmpr = p[n + 1] + p[n - 1];
  tmpr1 = (p[n + 1] - p[n - 1]) / r;
  if (i == 0)
    tmpr1 = 0.0f;
  tmpz = p[n + (iNrp2)] + p[n - (iNrp2)];

  // Get the function p for the new step.
  tmp = odr2 * tmpr + odz2 * tmpz - t2odrz * p[n] + odr_o2 * tmpr1;
  float result = p[n] + dt * (D * tmp - hI0kh[nold] * p[n]);
  pnew[n] = (result < 0) ? 0 : result;
//  r += dr;
 */ 
}

// -----------------------------------------------------------------
void calc_grid_cudasim(const float dt,
                    const int Nr, const int Nz, const float rmin,
                    const float *h, const float *h_det,
                    const float *hI0kh, const float dr, const float dz,
                    const float *p, float *pnew, const float D) {
  int i, k;
  float odr2 = 1.0 / (dr * dr);
  float odz2 = 1.0 / (dz * dz);
  float odr_o2 = 0.5 / dr;
  float t2odrz = 2.0 * (odr2 + odz2);
  const int iNrp2 = Nr+2;   // saves several calculations

  for (k = 1 ; k <= Nz; k++) {
    for (i = 0; i < Nr; i++) {
      calc_grid_cudathreadsim(k, i, dt, iNrp2, Nz, rmin,h, h_det, hI0kh, 
      dr, dz, p, pnew, D, odr_o2, odr2, odz2, t2odrz);
    }
  }
}

// -----------------------------------------------------------------
// Diffusion and bleaching.
//////////////////////////////////////////////////
void calc_grid_cudacheck(const float dt,
                    const int Nr, const int Nz, const float rmin,
                    const float *h, const float *h_det,
                    const float *hI0kh, const float dr, const float dz,
                    const float *p, float *pnew, const float D) {
  int i, k, n, nold = 0;
  float r, tmpr, tmpr1, tmp, tmpz;
  float odr_o2 = 0.5 / dr;
  float odr2 = 1.0 / (dr * dr);
  float odz2 = 1.0 / (dz * dz);
  float t2odrz = 2.0 * (odr2 + odz2);
  const int iNrp2 = Nr+2;   // saves several calculations

  for (k = 1 ; k <= Nz; k++) {
    n = k*(iNrp2);
    r = rmin /*+ dr */;


    // ---------------- pulled out the i=0 iteration and am 
    // explicitly setting tmpr1 to zero here.  This fixes the 
    // bug we were seeing because r was often zero on the left
    // edge of the grid
    n++;

    tmpr = p[n + 1] + p[n - 1];
    tmpr1 = 0 /*(p[n + 1] - p[n - 1]) / r*/;
    tmpz = p[n + (iNrp2)] + p[n - (iNrp2)];

    // Get the function p for the new step.
    tmp = odr2 * tmpr + odz2 * tmpz - t2odrz * p[n] + odr_o2 * tmpr1;
    float result = p[n] + dt * (D * tmp - hI0kh[++nold] * p[n]);
    pnew[n] = (result < 0) ? 0 : result;

    r += dr;
    // --------------- end of copied iteration loop

    for (i = 1; i < Nr; i++) {
      n++;

      tmpr = p[n + 1] + p[n - 1];
      tmpr1 = (p[n + 1] - p[n - 1]) / r;
      tmpz = p[n + (iNrp2)] + p[n - (iNrp2)];

      // Get the function p for the new step.
      tmp = odr2 * tmpr + odz2 * tmpz - t2odrz * p[n] + odr_o2 * tmpr1;
      float result = p[n] + dt * (D * tmp - hI0kh[++nold] * p[n]);
      pnew[n] = (result < 0) ? 0 : result;
      r += dr;
    }
  }
}



// --------------------------------------------------------------------  \\
//                                                                       \\
//                Single Precision Version                               \\
//                                                                       \\
// Obs and Obs1 - arrays of observables, the fluorescent signal (Obs),
// and its RMSD (Obs1). These 2 are the 1Darrays representing functions of time.
// Obs and Obs1 are being calculated within this function.
// M - number of time steps (constant).
// dt - time step in seconds (constant).
// N - number of elements in 1D arrays that are functions of position in space.
// h - function of position, 1D array (constant).
// h_det - function of position, 1D array (constant).
// hI0kh - function of position, 1D array (constant).
// dr - grid step in the r-dimension, in micrometers (constant).
// dz - grid step in the z-dimension, in micrometers (constant).
// Nr - number of steps in the r-dimension (constant).
// Nz - number of steps in the z-dimension (constant).
// rmin - minimal value of r (constant).
// p0 - initial value for pnew
// OLD   p - distribution function, the function of r and z; 1D array.
// OLD   pnew - array for the values of p at the next time step.
//      currently, pnew comes in entirely set to 1.0  - kv
// D - diffusion coefficient (constant).

void time_steps_xy_to_r_cuda(float *Obs, float *Obs1, const int M, 
                        const float dt, 
                        const int N, const float *h, const float *h_det, 
                        const float *hI0kh, const float dr, const float dz, 
                        const int Nr, const int Nz, const float rmin, 
                        const float p0, const float D)
{
// Counters for loops.
   int l = 0;
   int i = 0;
   int k = 0;
   int n = 0;
   int nold = 0;  // used to track location in h/h_det/hI0kh array 
                  // that we need to grab


// Variable for the values of r.
   float r = 0.0f;

// Auxiliary constants.

// Auxiliary variables.
   const int iNrp2 = Nr+2;   // saves several calculations
   const int iNzp2 = Nz+2;
   const float f2piDrDz =  2.0 * PI * dr * dz;

   float *p = (float *) malloc( (iNrp2)*(iNzp2) * sizeof(float));
   float *pnew = (float *) malloc( (iNrp2)*(iNzp2) * sizeof(float));

   // set to initial condition
   for (i=0; i<((iNrp2)*(iNzp2));i++) {
      pnew[i]=p0;
   }

   float *pTemp;

   // define temp array that holds h * h_det for each grid position
   // saves us having to calculate in the inner loop each time
   float *rgTmp1 = (float *) malloc( (N+1)*sizeof(float));
   for (i=1; i <= N; i++)
   {
      rgTmp1[i] = h[i] * h_det[i];
   }

#if defined(CUDA)
   // allocate CUDA memory blocks
   cudadevdata *dev = (cudadevdata *) malloc(sizeof(cudadevdata));
   init_cuda_devdata(dev, Nr, Nz);

   // Copy the Host input data to the GPU..
   copy_to_cuda_padded(dev->pold,  dev->gpusz, p, dev->sz);
   copy_to_cuda_padded(dev->h,     dev->gpusz, h, dev->sz);
   copy_to_cuda_padded(dev->h_det, dev->gpusz, h_det, dev->sz);
   copy_to_cuda_padded(dev->hI0kh, dev->gpusz, hI0kh, dev->sz);
#endif

// All time steps, from 1 to M.
   for (l = 1; l <= M; l++)
   {

// Update the arrays at the new time step.
// Array p becomes the same as pnew has become at the previous time step;
// p will be used as an input at this time step, to calculate pnew.
      pTemp = p;
      p = pnew;
      pnew = pTemp;
//      fprintf(stderr,"\ntimestep %d", l); printArray("", p, iNrp2, iNzp2);

//      fprintf(stderr, "before memcpy's (Nr %d Nz %d size_t %d) %d %d %d\n",Nr, Nz, sizeof(size_t), 1, (1+(iNrp2)*2), Nr);
      // prepare p array to be used by padding with the proper values
      // top row
      memcpy(p+1, p+1+(iNrp2)*2, sizeof(float)*Nr);

      // bottom row
      memcpy(p+1+(iNrp2)*(Nz+1), p+1+(iNrp2)*(Nz-1), sizeof(float)*Nr);
//      printArray("After top/bottom",p, iNrp2, iNzp2);

      // sides
      int iTmp = (iNrp2)*(Nz+1);
      for (i=iNrp2; i < iTmp ; i+=(iNrp2) )
      {
         p[i] = p[i+2];
         p[i+Nr+1] = p[i+Nr-1];
      }

//      fprintf(stderr, "after doing sides\n");
//     printArray("After BC", p, iNrp2, iNzp2);

      // Diffusion and bleaching.
      //////////////////////////////////////////////////

//      fprintf(stderr, "Before nested loop\n");

//      fprintf(stderr, "odr2:%f, odz2:%f, odr_o2:%f, rmin:%f, dr:%f\n", odr2, odz2, odr_o2, rmin, dr);


#if defined(CUDA)
      if (calc_grid_cuda(dev, dt, Nr, Nz, rmin,h, h_det, hI0kh, dr, dz, p, pnew, D)) {
        printf("Exiting...\n");
        exit(-1); // ugly, but the code has no error trapping presently
      }
#else
      calc_grid_cudacheck(dt, Nr, Nz, rmin,h, h_det, hI0kh, dr, dz, p, pnew, D);
#endif



#if defined(CUDA)
      // Copy the GPU output data back to the host and use it to 
      // calculate observables
      printf("Copying GPU data back for observable calculations...\n");
      copy_from_cuda_padded(pnew, dev->sz, dev->pnew, dev->gpusz);
#endif

      // initial values for observables.  Accumulated over grid
      float obsl  = 0.0f;
      float obsl1 = 0.0f;

      nold = 0;
      for (k = 1 ; k <= Nz; k++)
      {
         n = k*(iNrp2);
         r = rmin /*+ dr */;
         for (i = 0; i < Nr; i++)
         {

            // Accumulate observables
            // Observable; Obs(t) = \int dr h(r) h_det(r) p(r,t).
            // Noise; Obs1(t) = \int dr h(r)^2 h_det(r)^2 p(r,t) - 
            //                         (\int dr h(r) h_det(r) p(r,t))^2.
            float tmp2 = r * rgTmp1[++nold] * p[++n];
            obsl  += tmp2;
            obsl1 += tmp2 * rgTmp1[nold];

//            fprintf(stderr,"k:%d,i:%d,n:%d,nold:%d,r:%f,rgTmp:%f,tmp2:%f,obsl:%f,obsl1:%f,p[n]:%f\n",k,i,n,nold,r,rgTmp1[nold],tmp2,obsl,obsl1,p[n]);

            r += dr;
         }
      }

      /// store observables 
      Obs[l] = obsl;
      Obs1[l] = obsl1;
      Obs[l]  *= f2piDrDz;
      Obs1[l] = Obs1[l] * f2piDrDz - Obs[l] * Obs[l];

//      printArray("timestep", pnew, iNrp2, iNzp2);
//      fprintf(stderr, "end of timestep.  Obs[%d]=%16.12f, Obs1=%16.12f\n",l,
//                                                     Obs[l],Obs1[l]);
      /// end of timestep
      if (!(l & 0x0ff))
      {
        printf("Time step %d  of %d\n", l, M);
//        printArray("timestep", pnew, iNrp2, iNzp2);
      }
   }

#if defined(CUDA)
   free_cuda_devdata(dev);
   free(dev);
#endif


   free (rgTmp1);
   free (p);
   free (pnew);
}



